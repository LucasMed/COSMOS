I"∞,<div class="note">
  <h5>This documentation is for COSMOS Developers</h5>
  <p>If you‚Äôre simply trying to setup a COSMOS system you‚Äôre probably looking for the <a href="/docs/system">System Configuration</a> page. If you‚Äôre trying to create a custom interface, background task, conversion, or build a custom tool then this is the right place.</p>
</div>

<p>The PacketItem class is used to access an individual item within a <a href="/docs/packet_class">Packet</a>. The primary way to access Packet instances is through the <a href="/docs/system_class">System</a> class. The PacketItem class provides access to information about the item like its location in the packet, type, endianness, conversions, states, etc.</p>

<p>The <a href="https://github.com/BallAerospace/COSMOS/blob/master/lib/cosmos/packets/packet_item.rb">packet_item.rb</a> source code on Github.</p>

<h2 id="programming-packetitem">Programming PacketItem</h2>

<p>Custom COSMOS code may need to interact with PacketItem as it provides access to the individual item defined by your command and telemetry definitions. PacketItem inherits from StructureItem which it uses to provide some of the lower level functionality associated with defining an item. Typically you‚Äôre directly using the PacketItem class. PacketItem instances can be either command items or telemetry items and there is no way to directly know whether an instance is from a command or telemetry packet. However, since you‚Äôre typically getting packet instances through <code class="language-plaintext highlighter-rouge">System.commands</code> or <code class="language-plaintext highlighter-rouge">System.telemetry</code> this is rarely an issue in practice.</p>

<h3 id="packetitem-instance-variables">PacketItem Instance Variables</h3>

<p>PacketItem defines a large number of instance variables that provide information about the packet. The most commonly used are as follows:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">name</code> - Item name as a string</li>
  <li><code class="language-plaintext highlighter-rouge">description</code> - Description of the item</li>
  <li><code class="language-plaintext highlighter-rouge">bit_offset</code> - Where in the binary buffer the item exists</li>
  <li><code class="language-plaintext highlighter-rouge">bit_size</code> - The number of bites which represent the item in the buffer</li>
  <li><code class="language-plaintext highlighter-rouge">data_type</code> - Data type which can be :INT, :UINT, :FLOAT, :STRING, :BLOCK, or :DERIVED. See <a href="/docs/command">Command</a> or <a href="/docs/telemetry">Telemetry</a> for a description of the types.</li>
  <li><code class="language-plaintext highlighter-rouge">endianness</code> - Endianness of the item which is either :BIG_ENDIAN or :LITTLE_ENDIAN.</li>
  <li><code class="language-plaintext highlighter-rouge">read_conversion</code> - Conversion applied when reading the item (typically applied to telemetry items)</li>
  <li><code class="language-plaintext highlighter-rouge">write_conversion</code> - Conversion applied when writing the item (typically applied to command items)</li>
  <li><code class="language-plaintext highlighter-rouge">states</code> - States used to convert a numeric value to a string</li>
  <li><code class="language-plaintext highlighter-rouge">units</code> - Abbreviated units of the item, e.g. ‚ÄúV‚Äù</li>
  <li><code class="language-plaintext highlighter-rouge">range</code> - Valid range of values (nil for :STRING or :BLOCK types, only applies to command items)</li>
  <li><code class="language-plaintext highlighter-rouge">id_value</code> - Value used to identify a packet</li>
  <li><code class="language-plaintext highlighter-rouge">default</code> - Default value for the item (only applies to command items)</li>
  <li><code class="language-plaintext highlighter-rouge">limits</code> - Limits for the item (only applies to telemetry items)</li>
</ol>

<h3 id="packetitem-methods">PacketItem Methods</h3>

<p>The only methods most developers will use on PacketItem instances are the accessor methods that access the instance variables defined above. There are also corresponding setter methods that set all the above variables.</p>

<p>Command Example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">System</span><span class="p">.</span><span class="nf">commands</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">packet</span><span class="o">|</span>
  <span class="n">packet</span><span class="p">.</span><span class="nf">sorted_items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">::</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">description</span><span class="si">}</span><span class="s2"> range:</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">range</span><span class="si">}</span><span class="s2"> default:</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">default</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Telemetry Example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">System</span><span class="p">.</span><span class="nf">telemetry</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">packet</span><span class="o">|</span>
  <span class="n">packet</span><span class="p">.</span><span class="nf">sorted_items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">::</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">description</span><span class="si">}</span><span class="s2"> states:</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">states</span><span class="si">}</span><span class="s2"> limits:</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">limits</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Note that once you have a Packet instance you can access the items using the following methods:</p>

<h4 id="packetget_item">packet.get_item</h4>

<p>Returns an individual item by name</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">item</span> <span class="o">=</span> <span class="n">packet</span><span class="p">.</span><span class="nf">get_item</span><span class="p">(</span><span class="s2">"ITEM_NAME"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="packetitems">packet.items</h4>

<p>Returns a hash of items keyed by the item name</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">packet</span><span class="p">.</span><span class="nf">items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">item</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"item:</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">description</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="packetsorted_items">packet.sorted_items</h4>

<p>Returns an array of items sorted by the bit_offset</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">packet</span><span class="p">.</span><span class="nf">sorted_items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"item:</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">bit_offset</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="packetid_items">packet.id_items</h4>

<p>Returns an array of all the ID items defined in the packet. ID items are defined by the <a href="/docs/command/#id_parameter">ID_PARAMETER</a> keyword in commands and the <a href="/docs/telemetry/#id_item">ID_ITEM</a> keyword in telemetry (and their associated APPEND keywords).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">packet</span><span class="p">.</span><span class="nf">id_items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"item:</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">id_value</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="packetlimits_items">packet.limits_items</h4>

<p>Returns an array of all the items defined in the packet with limits. Limits items are defined by the <a href="/docs/telemetry/#limits">LIMITS</a> keyword in telemetry items.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">packet</span><span class="p">.</span><span class="nf">limits_items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"item:</span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">item</span><span class="p">.</span><span class="nf">limits</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>
:ET